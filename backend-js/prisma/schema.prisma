// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id Int @id @default(autoincrement())
  username String
  email String
  password String
  role Role @default(USER)
  displayName String @default("no username")
  refreshToken String @default("none")
  profileImage ProfileImage?
  usernameLastChanged Int @default(0)
  accountCreated DateTime @default(now())
  lastOnline DateTime @default(now())
  requestsSent FriendRequest[] @relation(name: "origin")
  requestsReceived FriendRequest[] @relation(name: "destination")
}

model ProfileImage {
  userId Int @id
  user User @relation(fields: [userId], references: [id])
  avatar Bytes
}

model FriendRequest {
  @@id(fields: [requestOriginId, requestDestinationId])
  requestOrigin User @relation(name: "origin", fields: [requestOriginId], references: [id])
  requestOriginId Int
  requestDestination User @relation(name: "destination", fields: [requestDestinationId], references: [id])
  requestDestinationId Int
  status FriendRequestStatus @default(PENDING)
  created DateTime @default(now())
}

model Friendship {
  @@id([user1, user2])
  user1 Int
  user2 Int
  created DateTime @default(now())
  lastActivity DateTime @default(now())
}